kind: ConfigMap
metadata:
  name: grafana-alloy-logs
  namespace: monitoring
apiVersion: v1
data:
  config.alloy: |
    logging {
        level  = "debug"
        format = "json"
    }
    // LOKI configs
    loki.write "logs_default" {
      endpoint {
        url = "https://logs-prod-017.grafana.net/loki/api/v1/push"

        basic_auth {
          username = "409497"
          password = "eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="
        }
      }
      external_labels = {
        cluster = "autopilot-cluster-app",
        agent = "grafana-alloy-logs",
      }
    }

    local.file_match "logs_default_hello_observability" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/tmp/hello-observability.log",
        job         = "hello-observability",
      }]
    }

    local.file_match "logs_default_ms_service_app_ms1" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/tmp/ms-service-app-ms1.log",
        job         = "ms-service-app-ms1",
      }]
    }

    local.file_match "logs_default_ms_service_app_ms2" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/tmp/ms-service-app-ms2.log",
        job         = "ms-service-app-ms2",
      }]
    }

    loki.source.file "logs_default_hello_observability" {
      targets    = local.file_match.logs_default_hello_observability.targets
      forward_to = [loki.write.logs_default.receiver]
    }


    loki.source.file "logs_default_ms_service_app_ms1" {
      targets    = local.file_match.logs_default_ms_service_app_ms1.targets
      forward_to = [loki.write.logs_default.receiver]
    }

    loki.source.file "logs_default_ms_service_app_ms2" {
      targets    = local.file_match.logs_default_ms_service_app_ms2.targets
      forward_to = [loki.write.logs_default.receiver]
    }

    local.file_match "logs_default_tomcat_access" {
      path_targets = [{
        __address__ = "localhost",
        __path__    = "/tmp/access_log.log",
        job         = "tomcat-access",
      }]
    }

    loki.source.file "logs_default_tomcat_access" {
      targets    = local.file_match.logs_default_tomcat_access.targets
      forward_to = [loki.write.logs_default.receiver]
    }

    discovery.kubernetes "kubernetes_pods" {
        role = "pod"
        selectors {
            role = "pod"
            field = "spec.nodeName=" + env("HOSTNAME")
        }
    }
    discovery.relabel "kubernetes_pods" {
      targets = discovery.kubernetes.kubernetes_pods.targets
        // Base rules
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "instance"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container_name"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          separator = "/"
          action = "replace"
          replacement = "$1"
          target_label = "job"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          separator = "/"
          action = "replace"
          replacement = "/var/log/pods/*$1/*.log"
          target_label = "__path__"
        }
        // set the container runtime as a label
        rule {
            action = "replace"
            source_labels = ["__meta_kubernetes_pod_container_id"]
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
            target_label = "tmp_container_runtime"
        }
        // Other rules
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_label_component"]
        //   action = "replace"
        //   target_label = "component"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_label_app"]
        //   action = "replace"
        //   target_label = "app"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_label_name"]
        //   action = "replace"
        //   target_label = "name"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_annotation_kubernetes_io_config_mirror"]
        //   action = "replace"
        //   target_label = "io_config_mirror"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_controller_name"]
        //   action = "replace"
        //   target_label = "controller_name"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_node_name"]
        //   action = "replace"
        //   target_label = "node_name"
        // }
        // rule {
        //   source_labels = ["__meta_kubernetes_pod_uid"]
        //   action = "replace"
        //   target_label = "pod_uid"
        // }
    }
    discovery.relabel "filtered_kubernetes_pods" {
      targets = discovery.relabel.kubernetes_pods.output
        rule {
            source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_autogather"]
            regex = "(false|no|skip)"
            action = "drop"
        }
    }
    local.file_match "kubernetes_pods" {
      path_targets = discovery.relabel.filtered_kubernetes_pods.output
    }
    loki.source.file "kubernetes_pods" {
      targets    = local.file_match.kubernetes_pods.targets
      forward_to = [loki.process.kubernetes_pods.receiver]
    }
    loki.process "kubernetes_pods" {
      forward_to = [loki.process.application_filters.receiver]
        stage.match {
          selector = "{tmp_container_runtime=\"containerd\"}"
          stage.cri {}
          stage.labels {
            values = {
              time = "",
              stream  = "",
              flags  = "",
            }
          }
        }
        stage.match {
          selector = "{tmp_container_runtime=\"cri-o\"}"
          stage.cri {}
          stage.labels {
            values = {
              time = "",
              stream  = "",
              flags  = "",
            }
          }
        }
        stage.match {
          selector = "{tmp_container_runtime=\"docker\"}"
          stage.docker {}
          stage.labels {
            values = {
              time = "",
              stream  = "",
            }
          }
        }
        stage.label_drop {
            values = ["tmp_container_runtime","flags","time","stream"]
        }
    }

    loki.process "application_filters" {
      forward_to = [loki.write.logs_default.receiver]
      stage.match {
        selector = "{namespace=\"xp-acl-reservation-ss\"}"
        stage.drop {
          expression = ".*GetFullReservationController.getReservation.*"
        }
      }
      stage.match {
        selector = "{namespace=\"xp-acl-product-cart\"}"
        stage.drop {
          expression = ".*ProductCartController.getProductCart()*"
        }
      }
      stage.match {
        selector = "{namespace=\"bff-web-ancillaries\"}"
        stage.drop {
          expression = ".*response prices for passenger.*"
        }
      }
      stage.match {
        selector = "{namespace=\"xp-tc-order-event-handler\"}"
        stage.drop {
          expression = ".*onReservationUpdatedEvent.*"
        }
        stage.drop {
          expression = ".*onTripAddedEvent.*"
        }
        stage.drop {
          expression = ".*onTripPatchedEvent.*"
        }
      }
      stage.match {
        selector = "{namespace=\"xp-tc-order-history\"}"
        stage.drop {
          expression = ".*onReservationUpdatedEvent.*"
        }
        stage.drop {
          expression = ".*onTripAddedEvent.*"
        }
        stage.drop {
          expression = ".*onTripPatchedEvent.*"
        }
      }
      stage.match {
        selector = "{namespace=\"xp-tp-ordermanagement-v4\"}"

        stage.drop {
          expression = ".*Process order\\.*"
        }
      }
      stage.drop {
        expression = "(?i)\"severity\":\"DEBUG\""
      }
    }




