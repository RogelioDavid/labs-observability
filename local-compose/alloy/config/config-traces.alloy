logging {
    level  = "debug"
    format = "logfmt"
}

// Prometheus configs
prometheus.remote_write "metrics_hello_observability" {
  external_labels = {
    monitor = "hello-observability",
  }
  endpoint {
    name = "hello-observability-6397c4"
	url  = "https://prometheus-us-central1.grafana.net/api/prom/push"
	basic_auth {
	  username = "821057"
	  password = "eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="
	}
  }
}
 


// OtelCol configs

otelcol.auth.basic "tempo" {
  username = 406010
  password = "eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="
}
otelcol.auth.basic "promp" {
  username = 406010
  password ="eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="
}

otelcol.processor.batch "processorbatch" {
  output {
    metrics = [otelcol.exporter.otlp.basetotlp.input]
    logs    = [otelcol.exporter.otlp.basetotlp.input]
    traces  = [otelcol.exporter.otlp.basetotlp.input]
  }
}
otelcol.receiver.otlp "receiverbase" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  output {
    metrics = [otelcol.processor.batch.processorbatch.input]
    logs    = [otelcol.processor.batch.processorbatch.input]
    traces  = [otelcol.exporter.otlp.basetotlp.input,
			   otelcol.connector.servicegraph.servicegraphbase.input,
			   otelcol.connector.spanmetrics.spanmetricsbse.input,
			   otelcol.processor.batch.processorbatch.input]
  }
}

otelcol.receiver.prometheus "prometheusdefault" {
  output {
    metrics = [otelcol.exporter.otlp.basetotlp.input]
  }
}

otelcol.connector.servicegraph "servicegraphbase" {
  dimensions = ["http.method", "http.target"]
  latency_histogram_buckets = ["100ms", "250ms", "500ms", "1s", "2s", "5s", "10s"]	
  store {
	max_items = 20
	ttl = "2s" 
  }
  output {
    metrics = [otelcol.exporter.prometheus.default.input]
  }
}
otelcol.connector.spanmetrics "spanmetricsbse" {
  dimension {
    name = "http.status_code"
  }
  dimension {
    name = "http.method"
    default = "GET"
  }
  dimensions_cache_size = 333
  aggregation_temporality = "DELTA"
  histogram {
    unit = "s"
    explicit {
      buckets = ["100ms","200ms","500ms","750ms", "1s", "2s", "5s", "10s"]
    }
  }
  metrics_flush_interval = "15s"
  namespace = "test.namespace"
  output {
    metrics = [otelcol.exporter.otlp.basetotlp.input]
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.metrics_hello_observability.receiver]
}
otelcol.exporter.otlp "basetotlp" {
  client {
    endpoint = "tempo-us-central1.grafana.net:443"
    auth     = otelcol.auth.basic.tempo.handler
  }
}
