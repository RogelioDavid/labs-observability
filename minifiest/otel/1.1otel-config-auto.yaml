apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: opentelemetry-collector
spec:
  image: otel/opentelemetry-collector-contrib:0.97.0
  replicas: 1
  config: |
    extensions:
      basicauth/tempo:
        client_auth:
          username: "406010"
          password: "eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="
      basicauth/promp:
        client_auth:
          username: "821057"
          password: "eyJrIjoiNGRjNDU3MmQ1MTVlOTk2ODQ1Zjk1MGNmZDcwNGQyMmIwOGEwNjA3MyIsIm4iOiJyb2dtZW4tcHVibGlzaGVyIiwiaWQiOjgxNDMyMn0="


    connectors:
      spanmetrics:
        namespace: traces.spanmetrics
        exemplars:
          enabled: true      
      servicegraph:
        latency_histogram_buckets: [100ms, 200ms, 250ms, 200ms, 500ms, 1s, 2s, 5s, 10s, 20s]
        dimensions:
          - http.method
          - http.target 
        store:
          ttl: 1s
          max_items: 10  

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317

    exporters:
      prometheus/servicegraph:
        endpoint: tempo-us-central1.grafana.net:443
        auth:
          authenticator: basicauth/tempo
        namespace: servicegraph
      logging:
        loglevel: debug
      debug:  
      otlp:
        endpoint: tempo-us-central1.grafana.net:443
        auth:
          authenticator: basicauth/tempo



    processors:
      batch:
        timeout: 200ms
        send_batch_size: 512
        send_batch_max_size: 11000



    service:
      extensions: [ basicauth/tempo, basicauth/promp ]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp, debug, spanmetrics, servicegraph]
        metrics:
          receivers: [otlp, spanmetrics, servicegraph]
          processors: [batch]
          exporters: [debug]
        metrics/servicegraph:
          receivers: [servicegraph]
          exporters: [debug]      
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
---
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: auto-instrumentation
  namespace: opentelemetry-collector
spec:
  exporter:
    endpoint: http://otel-collector-collector.opentelemetry-collector.svc.cluster.local:4317
  propagators:
  - tracecontext
  #- baggage
  #- b3
  sampler:
    argument: '0.1'
    type: parentbased_traceidratio

  java:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:1.30.0
    env:
    - name: OTEL_INSTRUMENTATION_HTTP_CLIENT_CAPTURE_REQUEST_HEADERS
      value: "true"

  nodejs:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-nodejs:0.40.0
    env:
    - name: OTEL_INSTRUMENTATION_HTTP_CLIENT_CAPTURE_REQUEST_HEADERS
      value: "true"
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  labels:
    app: opentelemetry
    component: collector
  name: otel-collector
  namespace: opentelemetry-collector
spec:
  mode: sidecar
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
    exporters:
      debug:
      otlp:
        endpoint: http://otel-collector-collector.opentelemetry-collector.svc.cluster.local:4317
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [otlp]



